
"""
############################################
#                                          #
#            ##   USER BOT   ##            #
#                                          #
#            V0.2.0. BY MIKAYILAZ          #
#                                          # 
#                                          #
############################################

GitHub - https://github.com/mikayilaz 

""" 

# Importing the JSON library to handle configurations and data storage.
import json
# Importing OS library to manage file and directory operations.
import os
# Importing Pytz for timezone handling.
import pytz
# Importing Datetime to handle date and time operations.
from datetime import datetime, timedelta
# Importing Pyrogram for Telegram bot interactions.
from pyrogram import Client, filters
# Importing Pyrogram for Telegram bot interactions.
from pyrogram.types import Message
import requests
import asyncio
from function import gemini_response, g4f_response, chatgpt_response
from config import API_ID, API_HASH
import random
from config import WEATHER_API_KEY  
import yt_dlp
# Importing OS library to manage file and directory operations.
from youtubesearchpython import VideosSearch
# Importing OS library to manage file and directory operations.
import os
import asyncio
# Importing Pyrogram for Telegram bot interactions.
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app = Client("mybot", api_id=API_ID, api_hash=API_HASH)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
allowed_user_ids = [] # –í–∞—à —é–∑–µ—Ä-–∏–¥ –∏ —Ç–µ—Ö –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å "–∞–¥–º–∏–Ω–∞" –≤ –±–æ—Ç–µ
context_file = "context.json"
prefix_file = "prefix.json"
AVAILABLE_MODELS = ["g4f", "gemini", "chatgpt"]

# –ö—ç—à –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
context_cache = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ø–∞–º–∞
stop_spam_flag = False
STICKER_ID = ""
WEATHER_URL = "https://api.openweathermap.org/data/2.5/onecall"

# -------------------------------------------------------------------------------------------------
# *** –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ ***




# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è yt-dlp
ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'outtmpl': 'downloads/%(title)s.%(ext)s',
    'quiet': True,
    'no_warnings': True,
    'extract_flat': False,
    'nocheckcertificate': True,
    'prefer_ffmpeg': True,
    'keepvideo': False,
    'geo_bypass': True,
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
search_results_cache = {}

@app.on_message(filters.command("music"))

# Function: async def music_search_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def music_search_handler(client, message: Message):
    try:
        if len(message.command) < 2:
            await message.reply(
                "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /music –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏\n"
                "üìù –ü—Ä–∏–º–µ—Ä: /music In The End Linkin Park"
            )
            return

        search_query = " ".join(message.command[1:])
        status_msg = await message.reply("üîç –ò—â—É –º—É–∑—ã–∫—É...")
        
        try:
            videos_search = VideosSearch(search_query, limit=5)
            results = videos_search.result()['result']
        except Exception as search_error:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if not results:
            await status_msg.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        search_results_cache[message.from_user.id] = results

        response_text = "üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for idx, video in enumerate(results, 1):
            duration = video.get('duration', 'N/A')
            if duration == 'N/A':
                duration = '‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
            
            channel = video.get('channel', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
            views = video.get('viewCount', {}).get('text', 'N/A')
            
            response_text += (
                f"{idx}. {video['title']}\n"
                f"üë§ {channel} | ‚è± {duration}\n"
                f"üëÅ {views}\n\n"
            )
        
        response_text += "üí° –ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/download –Ω–æ–º–µ—Ä"
        await status_msg.edit_text(response_text)

    except Exception as e:
        await message.reply(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("download"))

# Function: async def download_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def download_handler(client, message: Message):
    try:
        if len(message.command) != 2:
            await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download –Ω–æ–º–µ—Ä")
            return

        user_id = message.from_user.id
        if user_id not in search_results_cache:
            await message.reply(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /music\n"
                "üîÑ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏"
            )
            return

        try:
            selection = int(message.command[1])
            if not (1 <= selection <= len(search_results_cache[user_id])):
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
                return
        except ValueError:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
            return

        video = search_results_cache[user_id][selection - 1]
        video_url = f"https://www.youtube.com/watch?v={video['id']}"

        status_msg = await message.reply(
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é: {video['title']}\n"
            "üéµ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        os.makedirs('downloads', exist_ok=True)

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(video_url, download=True)
                audio_file = ydl.prepare_filename(info).replace('.webm', '.mp3').replace('.m4a', '.mp3')
        except Exception as download_error:
            await status_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:\n"
                f"‚îî {str(download_error)}\n\n"
                "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É\n"
                "- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"
            )
            return

        try:
            duration = int(info.get('duration', 0))
            await client.send_audio(
                message.chat.id,
                audio=audio_file,
                title=info.get('title', 'Unknown'),
                performer=info.get('uploader', 'Unknown'),
                duration=duration,
                caption=(
                    f"üéµ {info.get('title')}\n"
                    f"üë§ {info.get('uploader')}\n"
                    f"‚è± {duration//60}:{duration%60:02d}"
                )
            )
            await status_msg.delete()
        except Exception as send_error:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(send_error)}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            try:
                os.remove(audio_file)
                del search_results_cache[user_id]
            except:
                pass

    except Exception as e:
        error_message = str(e)
        if "ffmpeg" in error_message.lower():
            await message.reply(
                "‚ùóÔ∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FFmpeg!\n"
                "üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg:\n"
                "- MacOS: brew install ffmpeg\n"
                "- Ubuntu: sudo apt-get install ffmpeg\n"
                "- Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å ffmpeg.org"
            )
        else:
            await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {error_message}")

@app.on_message(filters.command("clear_downloads"))

# Function: async def clear_downloads_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def clear_downloads_handler(client, message: Message):
    if message.from_user.id in allowed_user_ids:
        try:
            if os.path.exists('downloads'):
                for file in os.listdir('downloads'):
                    try:
                        os.remove(os.path.join('downloads', file))
                    except:
                        continue
                await message.reply("‚úÖ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –æ—á–∏—â–µ–Ω–∞!")
            else:
                await message.reply("üìÇ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç–∞")
        except Exception as e:
            await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    else:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")


# -------------------------------------------------------------------------------------------------
# *** –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ***

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–°–ö

# Function: def get_time_in_msk():
# Description: Add a description here for the function's purpose.

def get_time_in_msk():
    return datetime.now(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞

# Function: def load_context():
# Description: Add a description here for the function's purpose.

def load_context():
    global context_cache
    if not context_cache:
        if os.path.exists(context_file):
            with open(context_file, "r", encoding="utf-8") as f:
                context_cache = json.load(f)
        else:
            context_cache = {}
    return context_cache

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞

# Function: def save_context(context):
# Description: Add a description here for the function's purpose.

def save_context(context):
    global context_cache
    context_cache = context
    with open(context_file, "w", encoding="utf-8") as f:
        json.dump(context, f, ensure_ascii=False, indent=4)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# Function: def update_user_context(user_id, message):
# Description: Add a description here for the function's purpose.

def update_user_context(user_id, message):
    context = load_context()
    user_id_str = str(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
    if user_id_str not in context:
        context[user_id_str] = {"messages": [], "model": "gemini"}
    context[user_id_str]["messages"].append(message)
    if len(context[user_id_str]["messages"]) > 10:
        context[user_id_str]["messages"].pop(0)
    save_context(context)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# Function: def get_user_model(user_id):
# Description: Add a description here for the function's purpose.

def get_user_model(user_id):
    context = load_context()
    return context.get(str(user_id), {}).get("model", "gemini")

# -------------------------------------------------------------------------------------------------
# *** –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ***

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞

# Function: def load_prefix():
# Description: Add a description here for the function's purpose.

def load_prefix():
    if os.path.exists(prefix_file):
        with open(prefix_file, "r", encoding="utf-8") as f:
            return json.load(f).get("prefix", "/")
    return "/"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞

# Function: def save_prefix(prefix):
# Description: Add a description here for the function's purpose.

def save_prefix(prefix):
    with open(prefix_file, "w", encoding="utf-8") as f:
        json.dump({"prefix": prefix}, f, ensure_ascii=False, indent=4)

# -------------------------------------------------------------------------------------------------
# *** –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ***

@app.on_message(filters.command("help"))

# Function: async def help_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def help_handler(client, message: Message):
    prefix = load_prefix()
    help_text = f"""
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîç **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
{prefix}help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
{prefix}time - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –º–∏—Ä–∞
{prefix}info <user_id|username> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
{prefix}weather <–≥–æ—Ä–æ–¥> - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ

üéµ **–ú—É–∑—ã–∫–∞:**
{prefix}music <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
{prefix}download <–Ω–æ–º–µ—Ä> - –°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

ü§ñ **AI –∫–æ–º–∞–Ω–¥—ã:**
{prefix}set_model <model_name> - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ AI (g4f, gemini, chatgpt)
{prefix}gpt <—Ç–µ–∫—Å—Ç> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
{prefix}clear_context - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üéÆ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
{prefix}meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º


‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
{prefix}set_prefix <—Å–∏–º–≤–æ–ª> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ {prefix}weather –ú–æ—Å–∫–≤–∞
‚Ä¢ {prefix}info @username
‚Ä¢ {prefix}music In The End Linkin Park
"""

    await message.reply(help_text)

@app.on_message(filters.command("time"))

# Function: async def time_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def time_handler(client, message: Message):
    # Dictionary of city timezones
    city_timezones = {
        "–±–∞–∫—É": "Asia/Baku",
        "–º–æ—Å–∫–≤–∞": "Europe/Moscow",
        "–ª–æ–Ω–¥–æ–Ω": "Europe/London",
        "–ø–∞—Ä–∏–∂": "Europe/Paris",
        "–Ω—å—é-–π–æ—Ä–∫": "America/New_York",
        "—Ç–æ–∫–∏–æ": "Asia/Tokyo",
        "–¥—É–±–∞–π": "Asia/Dubai",
        "—Å—Ç–∞–º–±—É–ª": "Europe/Istanbul",
        "–±–µ—Ä–ª–∏–Ω": "Europe/Berlin",
        "—Ä–∏–º": "Europe/Rome",
        "–ø–µ–∫–∏–Ω": "Asia/Shanghai",
        "—Å–µ—É–ª": "Asia/Seoul",
        "—Å–∏–¥–Ω–µ–π": "Australia/Sydney"
    }
    
    try:
        time_info = []
        for city, timezone in city_timezones.items():
            tz = pytz.timezone(timezone)
            current_time = datetime.now(tz)
            time_info.append(f"üåç {city.capitalize()}: {current_time.strftime('%H:%M:%S')}")
        
        # Join all times with newlines
        response = "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–∞—Ö:\n\n" + "\n".join(time_info)
        await message.reply(response)
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

@app.on_message(filters.command("info"))

# Function: async def info_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def info_handler(client, message: Message):
    try:
        args = message.text.split(maxsplit=1)
        user_id = message.from_user.id

        if len(args) > 1:
            query = args[1]
            try:
                user_id = int(query)
            except ValueError:
                user = await client.get_users(query)
                user_id = user.id

        user = await client.get_users(user_id)
        chat_member = await client.get_chat_member(message.chat.id, user_id)

        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        language_code = user.language_code if user.language_code else '–ù–µ —É–∫–∞–∑–∞–Ω'
        bio = getattr(user, 'bio', '–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏')
        status = chat_member.status
        joined_date = chat_member.joined_date.strftime('%Y-%m-%d %H:%M:%S') if chat_member.joined_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info_text = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**

üìå **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ ID: `{user.id}`
‚Ä¢ –ò–º—è: {user.first_name}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üåç **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
‚Ä¢ –Ø–∑—ã–∫: {language_code}
‚Ä¢ –ë–æ—Ç: {'–î–∞' if user.is_bot else '–ù–µ—Ç'}
‚Ä¢ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {bio}

üìä **–°—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ:**
‚Ä¢ –†–æ–ª—å: {status}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if status == 'administrator' else '–ù–µ—Ç'}
‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: {'–î–∞' if status == 'creator' else '–ù–µ—Ç'}
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫: {'–î–∞' if status == 'member' else '–ù–µ—Ç'}

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {joined_date}
"""
        try:
            created_at = user.date.strftime('%Y-%m-%d %H:%M:%S') if user.date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            info_text += f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}"
        except AttributeError:
            info_text += "‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–µ —É–∫–∞–∑–∞–Ω–∞"

        await message.reply(info_text)

    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

@app.on_message(filters.command("set_model"))

# Function: async def set_model_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def set_model_handler(client, message: Message):
    args = message.text.split()
    if len(args) != 2:
        await message.reply(f"‚ùó –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å: {', '.join(AVAILABLE_MODELS)}")
        return
    
    model = args[1].lower()
    if model not in AVAILABLE_MODELS:
        await message.reply(f"‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_MODELS)}")
        return
    
    context = load_context()
    user_id = str(message.from_user.id)
    if user_id not in context:
        context[user_id] = {"messages": []}
    context[user_id]["model"] = model
    save_context(context)
    await message.reply(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}")

@app.on_message(filters.command("clear_context"))

# Function: async def clear_context_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def clear_context_handler(client, message: Message):
    try:
        user_id = str(message.from_user.id)
        context = load_context()
        
        if user_id in context:
            del context[user_id]
            save_context(context)
            await message.reply("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        else:
            await message.reply("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")

@app.on_message(filters.command("set_prefix"))

# Function: async def set_prefix_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def set_prefix_handler(client, message: Message):
    args = message.text.split()
    if len(args) != 2:
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å. –ü—Ä–∏–º–µ—Ä: /set_prefix !")
        return
    
    new_prefix = args[1]
    if len(new_prefix) != 1:
        await message.reply("‚ùó –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º")
        return
    
    save_prefix(new_prefix)
    await message.reply(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {new_prefix}")

# -------------------------------------------------------------------------------------------------
# *** –°–ø–∞–º-–∞—Ç–∞–∫–∏ ***

# –°–ø–∞–º-–∞—Ç–∞–∫–∞
@app.on_message(filters.command("spamattack"))

# Function: async def spamattack(client, message: Message):
# Description: Add a description here for the function's purpose.

async def spamattack(client, message: Message):
    global stop_spam_flag
    if message.from_user.id not in allowed_user_ids:
        await message.reply("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /spamattack 5")
        return

    try:
        count = int(args[1].strip())
        if count <= 0:
            await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        stop_spam_flag = False
        await message.reply(f"–ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º–∏—Ç—å {count} —Å–æ–æ–±—â–µ–Ω–∏–π!")

        for i in range(count):
            if stop_spam_flag:
                await message.reply("‚ö†Ô∏è –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                return
            await client.send_sticker(message.chat.id, STICKER_ID)
        await message.reply("‚úÖ –°–ø–∞–º –∑–∞–≤–µ—Ä—à—ë–Ω!")
    except ValueError:
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∞–º–∞
@app.on_message(filters.command("stopspam"))

# Function: async def stopspam(client, message: Message):
# Description: Add a description here for the function's purpose.

async def stopspam(client, message: Message):
    global stop_spam_flag
    if message.from_user.id not in allowed_user_ids:
        await message.reply("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    stop_spam_flag = True
    await message.reply("‚õî –°–ø–∞–º –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# -------------------------------------------------------------------------------------------------
# *** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò ***

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò

# Function: async def get_ai_response(model, message, user_id):
# Description: Add a description here for the function's purpose.

async def get_ai_response(model, message, user_id):
    try:
        context = load_context()
        user_context = context.get(str(user_id), {}).get("messages", [])
        full_message = "\n".join(user_context) + f"\n{message}"
        
        if model == "g4f":
            return await asyncio.to_thread(g4f_response, full_message)
        elif model == "gemini":
            return await asyncio.to_thread(gemini_response, full_message)
        elif model == "chatgpt":
            return await asyncio.to_thread(chatgpt_response, full_message)
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_ai_response: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# -------------------------------------------------------------------------------------------------
# *** –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–æ–≤ ***

MEME_API_URL = "https://meme-api.com/gimme"

@app.on_message(filters.command("meme"))

# Function: async def meme_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def meme_handler(client, message: Message):
    try:
        response = requests.get(MEME_API_URL)
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –º–µ–º–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if data.get("url"):
            await message.reply_photo(data["url"])
        else:
            await message.reply("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {str(e)}")



# -------------------------------------------------------------------------------------------------
# *** –ü–æ–≥–æ–¥–∞ ***

"""
–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏:
   - OpenWeatherMap API (https://openweathermap.org/api)
   - Telegram API (https://my.telegram.org/apps)
2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å config.py —Å–≤–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã:
üå° –ü–û–ì–û–î–ê –ù–ê –°–ï–ì–û–î–ù–Ø (–ì–æ—Ä–æ–¥)
‚õÖÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
‚ÜñÔ∏è –í–µ—Ç–µ—Ä –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
‚òÅÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
"""

@app.on_message(filters.command("weather"))

# Function: async def weather_handler(client, message: Message):
# Description: Add a description here for the function's purpose.

async def weather_handler(client, message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather –ì–æ—Ä–æ–¥
    –ü—Ä–∏–º–µ—Ä: /weather –ë–∞–∫—É
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
            "–ü—Ä–∏–º–µ—Ä: /weather –ë–∞–∫—É\n"
            "üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≥–æ—Ä–æ–¥–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É"
        )
        return

    city = args[1].strip()
    
    # URL endpoints –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    BASE_URL = "http://api.openweathermap.org/data/2.5"
    GEO_URL = "http://api.openweathermap.org/geo/1.0/direct"
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    base_params = {
        "appid": WEATHER_API_KEY,
        "units": "metric",
        "lang": "ru"
    }

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_response = requests.get(GEO_URL, params={
            **base_params,
            "q": city,
            "limit": 1
        })
        geo_response.raise_for_status()
        geo_data = geo_response.json()

        if not geo_data:
            await message.reply(
                "‚ùó –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞\n"
                "–ü—Ä–∏–º–µ—Ä: /weather –ë–∞–∫—É"
            )
            return

        lat, lon = geo_data[0]["lat"], geo_data[0]["lon"]

        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
        current_response = requests.get(f"{BASE_URL}/weather", params={
            **base_params,
            "lat": lat,
            "lon": lon
        })
        current_response.raise_for_status()
        current = current_response.json()

        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
        forecast_response = requests.get(f"{BASE_URL}/forecast", params={
            **base_params,
            "lat": lat,
            "lon": lon
        })
        forecast_response.raise_for_status()
        forecast = forecast_response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
        current_temp = round(current["main"]["temp"])
        current_desc = current["weather"][0]["description"]
        wind_speed = current["wind"]["speed"]
        wind_deg = current["wind"]["deg"]
        humidity = current["main"]["humidity"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞

# Function: def get_wind_direction(degrees):
# Description: Add a description here for the function's purpose.

        def get_wind_direction(degrees):
            directions = ["‚Üë", "‚ÜóÔ∏è", "‚Üí", "‚ÜòÔ∏è", "‚Üì", "‚ÜôÔ∏è", "‚Üê", "‚ÜñÔ∏è"]
            index = round(degrees / 45) % 8
            return directions[index]

        wind_direction = get_wind_direction(wind_deg)

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        forecasts = {}
        for item in forecast["list"]:
            dt = datetime.fromtimestamp(item["dt"])
            date = dt.strftime("%Y-%m-%d")
            hour = dt.hour
            
            if date not in forecasts:
                forecasts[date] = {
                    "night": [], # 00-06
                    "morning": [], # 06-12
                    "day": [], # 12-18
                    "evening": [] # 18-00
                }
            
            temp = round(item["main"]["temp"])
            desc = item["weather"][0]["description"]
            
            if 0 <= hour < 6:
                forecasts[date]["night"].append((temp, desc))
            elif 6 <= hour < 12:
                forecasts[date]["morning"].append((temp, desc))
            elif 12 <= hour < 18:
                forecasts[date]["day"].append((temp, desc))
            else:
                forecasts[date]["evening"].append((temp, desc))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üå° –ü–û–ì–û–î–ê –ù–ê –°–ï–ì–û–î–ù–Ø ({city})\n"
        message_text += f"‚õÖÔ∏è –°–µ–π—á–∞—Å: +{current_temp}¬∞ {current_desc}\n"
        message_text += f"–í–µ—Ç–µ—Ä: {wind_direction} {wind_speed:.2f} –º/—Å, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º
        dates = list(forecasts.keys())
        
        # –°–µ–≥–æ–¥–Ω—è
        if dates:
            today = dates[0]
            today_data = forecasts[today]
            if today_data["evening"]:
                temp, desc = today_data["evening"][0]
                message_text += f"C–µ–≥–æ–¥–Ω—è\nüå§ –í–µ—á–µ—Ä–æ–º: +{temp}..+{temp}¬∞, {desc}\n\n"

        # –ó–∞–≤—Ç—Ä–∞
        if len(dates) > 1:
            tomorrow = dates[1]
            tomorrow_data = forecasts[tomorrow]
            message_text += "–ó–∞–≤—Ç—Ä–∞\n"
            
            for period, emoji in [
                ("night", "üå§"),
                ("morning", "‚òÄÔ∏è"),
                ("day", "‚òÄÔ∏è"),
                ("evening", "‚õÖÔ∏è")
            ]:
                if tomorrow_data[period]:
                    temp, desc = tomorrow_data[period][0]
                    period_name = {
                        "night": "–ù–æ—á—å—é",
                        "morning": "–£—Ç—Ä–æ–º",
                        "day": "–î–Ω—ë–º",
                        "evening": "–í–µ—á–µ—Ä–æ–º"
                    }[period]
                    message_text += f"{emoji} {period_name}: +{temp}..+{temp}¬∞, {desc}\n"
            message_text += "\n"

        # –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
        if len(dates) > 2:
            day_after = dates[2]
            after_data = forecasts[day_after]
            next_date = datetime.strptime(day_after, "%Y-%m-%d").strftime("%d.%m.%Y")
            message_text += f"{next_date}\n"
            
            for period, emoji in [
                ("night", "‚òÅÔ∏è"),
                ("morning", "‚õÖÔ∏è"),
                ("day", "‚òÅÔ∏è")
            ]:
                if after_data[period]:
                    temp, desc = after_data[period][0]
                    period_name = {
                        "night": "–ù–æ—á—å—é",
                        "morning": "–£—Ç—Ä–æ–º",
                        "day": "–î–Ω—ë–º"
                    }[period]
                    message_text += f"{emoji} {period_name}: +{temp}..+{temp}¬∞, {desc}\n"

        await message.reply(message_text)

    except requests.exceptions.RequestException as e:
        error_message = (
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
        )
        await message.reply(error_message)
    except Exception as e:
        error_message = (
            "‚ùó –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        )
        await message.reply(error_message)





# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. V0.2.0. By Mikayilaz")
    app.run()
